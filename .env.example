# .env.example
# Copy this file to .env and fill in your actual values

# Environment
ENVIRONMENT=development

# Server Configuration
SERVER_PORT=8080
SERVER_HOST=localhost
SERVER_READ_TIMEOUT=15
SERVER_WRITE_TIMEOUT=15
SERVER_IDLE_TIMEOUT=60

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=your_db_password
DB_NAME=ip_marketplace
DB_SSL_MODE=disable
DB_MAX_OPEN_CONNS=25
DB_MAX_IDLE_CONNS=25
DB_MAX_LIFETIME=300

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_ACCESS_TTL=24
JWT_REFRESH_TTL=168

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# AWS Configuration
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_S3_BUCKET=ip-marketplace-assets
AWS_CLOUDFRONT_URL=https://your-cloudfront-domain.com

# Payment Configuration
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
PAYPAL_CLIENT_ID=your_paypal_client_id
PAYPAL_CLIENT_SECRET=your_paypal_client_secret
PLATFORM_FEE_PERCENT=5.0

# Email Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password
FROM_EMAIL=noreply@ipmarketplace.com
FROM_NAME=IP Marketplace

# Blockchain Configuration (optional)
BLOCKCHAIN_NETWORK=polygon
BLOCKCHAIN_RPC_URL=https://polygon-rpc.com
BLOCKCHAIN_PRIVATE_KEY=your_blockchain_private_key
BLOCKCHAIN_CONTRACT_ADDRESS=0x...

# Frontend Configuration
FRONTEND_BASE_URL=http://localhost:3000

# Internationalization
DEFAULT_LOCALE=en
LOCALES_PATH=./internal/i18n/locales

---

# scripts/init.sql
-- Database initialization script
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Create indexes for full-text search
-- (These will be created by GORM migrations, but can be added here for manual setup)

-- Set up database for optimal performance
ALTER DATABASE ip_marketplace SET timezone TO 'UTC';

---

# scripts/setup.sh
#!/bin/bash

# IP Marketplace Backend Setup Script

echo "🚀 Setting up IP Marketplace Backend..."

# Check if Go is installed
if ! command -v go &> /dev/null; then
    echo "❌ Go is not installed. Please install Go 1.21 or later."
    exit 1
fi

# Check Go version
GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
REQUIRED_VERSION="1.21"

if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$GO_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then
    echo "❌ Go version $REQUIRED_VERSION or later is required. Current version: $GO_VERSION"
    exit 1
fi

echo "✅ Go version $GO_VERSION detected"

# Create directories
echo "📁 Creating project directories..."
mkdir -p uploads/{ip-assets,products,avatars,general}
mkdir -p logs
mkdir -p ssl

# Copy environment file if it doesn't exist
if [ ! -f .env ]; then
    echo "📝 Creating .env file from example..."
    cp .env.example .env
    echo "⚠️  Please edit .env file with your actual configuration values"
fi

# Install dependencies
echo "📦 Installing Go dependencies..."
go mod tidy
go mod download

# Build the application
echo "🔨 Building the application..."
go build -o bin/ip-marketplace ./cmd/server

if [ $? -eq 0 ]; then
    echo "✅ Build successful!"
else
    echo "❌ Build failed!"
    exit 1
fi

# Check if Docker is available
if command -v docker &> /dev/null; then
    echo "🐳 Docker detected. You can use 'docker-compose up' to run with containers."
else
    echo "⚠️  Docker not found. You'll need to set up PostgreSQL and Redis manually."
fi

# Check if PostgreSQL is running (for local development)
if command -v psql &> /dev/null; then
    echo "🗄️  PostgreSQL client detected."
    echo "Make sure PostgreSQL server is running and database 'ip_marketplace' exists."
else
    echo "⚠️  PostgreSQL client not found. Please install PostgreSQL for local development."
fi

echo ""
echo "🎉 Setup complete!"
echo ""
echo "Next steps:"
echo "1. Edit the .env file with your configuration"
echo "2. Set up PostgreSQL database"
echo "3. Run: ./bin/ip-marketplace (or 'go run ./cmd/server')"
echo "4. Or use Docker: docker-compose up"
echo ""
echo "API will be available at: http://localhost:8080"
echo "Health check: http://localhost:8080/health"

---

# scripts/migrate.sh
#!/bin/bash

# Database migration script

echo "🗄️  Running database migrations..."

# Load environment variables
if [ -f .env ]; then
    source .env
fi

# Check if database is accessible
echo "Checking database connection..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" > /dev/null 2>&1

if [ $? -eq 0 ]; then
    echo "✅ Database connection successful"
else
    echo "❌ Cannot connect to database. Please check your configuration."
    exit 1
fi

# Run the application with migration flag (if implemented)
go run ./cmd/server --migrate

echo "✅ Migrations completed!"

---

# scripts/test.sh
#!/bin/bash

# Test script

echo "🧪 Running tests..."

# Run unit tests
echo "Running unit tests..."
go test ./internal/... -v

# Run integration tests (if they exist)
if [ -d "tests/integration" ]; then
    echo "Running integration tests..."
    go test ./tests/integration/... -v
fi

# Run linting
if command -v golangci-lint &> /dev/null; then
    echo "Running linter..."
    golangci-lint run
else
    echo "⚠️  golangci-lint not found. Install it for better code quality checks."
fi

echo "✅ Tests completed!"

---

# scripts/build.sh
#!/bin/bash

# Build script for different platforms

echo "🔨 Building IP Marketplace Backend..."

# Create bin directory
mkdir -p bin

# Build for current platform
echo "Building for current platform..."
go build -ldflags="-w -s" -o bin/ip-marketplace ./cmd/server

# Build for Linux (common deployment target)
echo "Building for Linux (amd64)..."
GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o bin/ip-marketplace-linux-amd64 ./cmd/server

# Build for Windows (if needed)
echo "Building for Windows (amd64)..."
GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o bin/ip-marketplace-windows-amd64.exe ./cmd/server

# Build for macOS (if needed)
echo "Building for macOS (amd64)..."
GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o bin/ip-marketplace-darwin-amd64 ./cmd/server

# Build for macOS ARM (Apple Silicon)
echo "Building for macOS (arm64)..."
GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o bin/ip-marketplace-darwin-arm64 ./cmd/server

echo "✅ Build completed! Binaries are in the bin/ directory."

---

# Makefile
.PHONY: build test clean run docker-build docker-up docker-down setup migrate

# Default target
all: build

# Build the application
build:
	@echo "Building IP Marketplace Backend..."
	@go build -ldflags="-w -s" -o bin/ip-marketplace ./cmd/server

# Build for production
build-prod:
	@echo "Building for production..."
	@CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-w -s" -o bin/ip-marketplace ./cmd/server

# Run tests
test:
	@echo "Running tests..."
	@go test -v ./internal/...

# Run tests with coverage
test-coverage:
	@echo "Running tests with coverage..."
	@go test -v -coverprofile=coverage.out ./internal/...
	@go tool cover -html=coverage.out -o coverage.html

# Clean build artifacts
clean:
	@echo "Cleaning..."
	@rm -rf bin/
	@rm -f coverage.out coverage.html

# Run the application
run:
	@echo "Running IP Marketplace Backend..."
	@go run ./cmd/server

# Run with live reload (requires air: go install github.com/cosmtrek/air@latest)
dev:
	@if command -v air > /dev/null; then \
		air; \
	else \
		echo "Air not found. Install with: go install github.com/cosmtrek/air@latest"; \
		go run ./cmd/server; \
	fi

# Docker build
docker-build:
	@echo "Building Docker image..."
	@docker build -t imi-backend .

# Docker run
docker-up:
	@echo "Starting with Docker Compose..."
	@docker-compose up -d

# Docker stop
docker-down:
	@echo "Stopping Docker Compose..."
	@docker-compose down

# Setup project
setup:
	@chmod +x scripts/setup.sh
	@./scripts/setup.sh

# Run migrations
migrate:
	@chmod +x scripts/migrate.sh
	@./scripts/migrate.sh

# Format code
fmt:
	@echo "Formatting code..."
	@go fmt ./...

# Lint code (requires golangci-lint)
lint:
	@if command -v golangci-lint > /dev/null; then \
		golangci-lint run; \
	else \
		echo "golangci-lint not found. Install from https://golangci-lint.run/"; \
	fi

# Generate documentation
docs:
	@echo "Generating documentation..."
	@if command -v swag > /dev/null; then \
		swag init -g cmd/server/main.go; \
	else \
		echo "swag not found. Install with: go install github.com/swaggo/swag/cmd/swag@latest"; \
	fi

# Install development tools
install-tools:
	@echo "Installing development tools..."
	@go install github.com/cosmtrek/air@latest
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@go install github.com/swaggo/swag/cmd/swag@latest

# Help
help:
	@echo "Available commands:"
	@echo "  build          - Build the application"
	@echo "  build-prod     - Build for production"
	@echo "  test           - Run tests"
	@echo "  test-coverage  - Run tests with coverage"
	@echo "  clean          - Clean build artifacts"
	@echo "  run            - Run the application"
	@echo "  dev            - Run with live reload"
	@echo "  docker-build   - Build Docker image"
	@echo "  docker-up      - Start with Docker Compose"
	@echo "  docker-down    - Stop Docker Compose"
	@echo "  setup          - Setup project"
	@echo "  migrate        - Run database migrations"
	@echo "  fmt            - Format code"
	@echo "  lint           - Lint code"
	@echo "  docs           - Generate documentation"
	@echo "  install-tools  - Install development tools"
